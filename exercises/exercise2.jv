//Exercise-2:
//  Build an automated data pipeline for the following source:
//		https://www.govdata.de/web/guest/suchen/-/details/stadt-neuss-baumpflanzungen-2023
//      direct link to CSV: https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv
//      Do NOT use a local file, always take the data from the link above
//
//  Goal:
//      Keep only valid data we are interested in:
//          * Define types of values and constraints for them
//          * We are only interested in “Vogelsang”, valid stadtteil start with "Vogelsang"
//          * "id" contains geopoints with the following pattern:
//              - {geo-coordinate 1}, {geo-coordinate 2}
//              - a geo-coordinate is defined as {1-3 numbers}.{numbers}
//          * Drop "baumart_deutsch" column
//          * Drop all rows with invalid values
//      Assign fitting built-in SQLite types (e.g., BIGINT, TEXT or FLOAT) to all columns
//      Write data into a SQLite database called “trees.sqlite”, in the table “trees”
//
//  Use Jayvee version 0.6.3


pipeline TreePipeline {

    // Pipeline structure
    TreeExtractor
        -> TreeTextFileInterpreter
        -> TreeCSVInterpreter
        -> TreeTableInterpreter
        -> TreeDatabaseLoader;

    // BLOCK DEFINITONS
    // 1. Get CSV file: HttpExtractor = Input:None -> Output:File
    block TreeExtractor oftype HttpExtractor{
        url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
    }

    // 2. TextFileInterpreter = Input:File -> Output:TextFile
    block TreeTextFileInterpreter oftype TextFileInterpreter{}

    // 3. CSVInterpreter = Input:TextFile -> Output:Sheet
    block TreeCSVInterpreter oftype CSVInterpreter{
        delimiter: ";";
    }

    // Create data types: "stadtteil" and "id"
    // "stadteil":
    constraint Begin oftype RegexConstraint{
        regex: /^Vogelsang.*/;
    }
    
    valuetype stadtteil oftype text{
        constraints: [Begin];
    }

    // "id":
    constraint Structure oftype RegexConstraint{
        regex: /([0-9]{1,3}\.[0-9]+), ([0-9]{1,3}\.[0-9]+)/;
    }
    
    valuetype id oftype text{
        constraints: [Structure];
    }

    // 4. Table Interpreter = Input:Sheet -> Output:Table, leave out the "baumart_deutsch" column
    block TreeTableInterpreter oftype TableInterpreter{
        header: true;
        columns: [
            "lfd_nr" oftype integer,
            "stadtteil" oftype stadtteil, // Custom data type: start with “Vogelsang”
            "standort" oftype text,
            "baumart_botanisch" oftype text,
            "id" oftype id, // Custom data type: {geo-coordinate 1}, {geo-coordinate 2}
            "baumfamilie" oftype text
		];
    }

    // 5. Generate the SQLITE database: SQLiteLoader = Input:Table -> Output:Database 
    block TreeDatabaseLoader oftype SQLiteLoader {
        table: "trees";
        file: "./trees.sqlite";
    }


}