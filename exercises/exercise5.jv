//Exercise-5:
//  Build an automated data pipeline for the following source:
//      Direct download link: https://gtfs.rhoenenergie-bus.de/GTFS.zip
//
//  Goal:
//      Work with domain-specific GTFS data
//      Pick out only stops (from stops.txt)
//          * Only the columns stop_id, stop_name, stop_lat, stop_lon, zone_id with fitting data types
//      Filter data
//          * Only keep stops from zone 1925
//      Validate data
//          * stop_name must be a text but must maintain german umlauts
//          * stop_lat/stop_lon must be a geographic coordinates between -90 and 90, including upper/lower bounds
//          * Drop rows containing invalid data           
//      Use fitting SQLite types (e.g., BIGINT, TEXT or FLOAT) for all columns
//      Write data into a SQLite database called “gtfs.sqlite”, in the table “stops”
//
//  Use Jayvee version 0.6.4
//  Submit as  /exercises/exercise4.jv


pipeline GTFSPipeline{

    // Pipeline structure
    GTFSHttpExtractor  
    -> GTFSArchiveInterpreter  
    -> GTFSFilePicker  
    -> GTFSTextFileInterpreter 
    -> GTFSCSVInterpreter  
    -> GTFSTableInterpreter  
    -> GTFSDatabaseLoader;

    // BLOCK DEFINITONS
    // 1. Get data from the given URL
    block GTFSHttpExtractor oftype HttpExtractor{
        url:'https://gtfs.rhoenenergie-bus.de/GTFS.zip';
    }


    // 2. Access .zip file
    block GTFSArchiveInterpreter oftype ArchiveInterpreter{
        archiveType:'zip';
    }


    // 3. Select file of interest inside the .zip
    block GTFSFilePicker oftype FilePicker{
        path: '/stops.txt';
    }


    // 4. 
    block GTFSTextFileInterpreter oftype TextFileInterpreter{
    }


    // 5.
    block GTFSCSVInterpreter oftype CSVInterpreter{
        enclosing:'"';
        delimiter:",";
    }


    // 6. Custom data types (useful for filtering data)
    // zone_id:
    constraint ValidZone oftype RangeConstraint {
        lowerBound: 1925;
        lowerBoundInclusive: true;
        upperBound: 1925;
        upperBoundInclusive: true;
    }

    valuetype ZoneID oftype integer{
        constraints:[ValidZone];
    }

    // stop_lat and stop_lon:
    constraint ValidCoordinate on decimal:
        value >=-90 and value <=90;

    valuetype GeoCoordinate oftype decimal{
        constraints:[ValidCoordinate];
    }

    
    // 7. Table Interpreter with fitting data types
    block GTFSTableInterpreter oftype TableInterpreter{
        header : true ;
        columns:[
            'stop_id' oftype integer,
            'stop_name' oftype text,
            'stop_lat' oftype GeoCoordinate,
            'stop_lon' oftype GeoCoordinate,
            'zone_id' oftype ZoneID,
        ];
    }


    // 8. Generate the SQLITE database 
    block GTFSDatabaseLoader oftype SQLiteLoader{
        table:'stops';
        file:'./gtfs.sqlite';
    }

}